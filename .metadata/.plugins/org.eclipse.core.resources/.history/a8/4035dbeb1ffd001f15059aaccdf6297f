// **************************************************************************
//
//               Demo program for APPS labs
//
// Subject:      Computer Architectures and Parallel systems
// Author:       Petr Olivka, petr.olivka@vsb.cz, 02/2025
// Organization: Department of Computer Science, FEECS,
//               VSB-Technical University of Ostrava, CZ
//
// File:         Main program for LCD module
//
// **************************************************************************

/**
 * @file    MCXN947_APPS.cpp
 * @brief   Application entry point.
 */

#include <stdio.h>
#include <functional>
#include "board.h"
#include "peripherals.h"
#include "pin_mux.h"
#include "clock_config.h"
#include "fsl_debug_console.h"

/* TODO: insert other include files here. */

#include "fsl_gpio.h"
#include "fsl_port.h"
#include "fsl_mrt.h"
#include "fsl_lpspi.h"

#include "mcxn-kit.h"
#include "lcd_lib.h"

// **************************************************************************
//! System initialization. Do not modify it!!!
void _mcu_initialization() __attribute__(( constructor( 0x100 ) ));

void _mcu_initialization()
{
    BOARD_InitBootPins();
    BOARD_InitBootClocks();
    BOARD_InitBootPeripherals();
    BOARD_InitDebugConsole();
    CLOCK_EnableClock( kCLOCK_Gpio0 );
    CLOCK_EnableClock( kCLOCK_Gpio1 );
    CLOCK_EnableClock( kCLOCK_Gpio2 );
    CLOCK_EnableClock( kCLOCK_Gpio3 );
    CLOCK_EnableClock( kCLOCK_Gpio4 );
}
// **************************************************************************

//! Global data

//! LEDs on MCXN-KIT - instances of class DigitalOut
DigitalOut g_led_P3_16( P3_16 );
DigitalOut g_led_P3_17( P3_17 );

//! Button on MCXN-KIT - instance of class DigitalIn
DigitalIn g_but_P3_18( P3_18 );
DigitalIn g_but_P3_19( P3_19 );
DigitalIn g_but_P3_20( P3_20 );
DigitalIn g_but_P3_21( P3_21 );

//! Callback function for LED control
void control_from_ticker()
{
	static int l_ticks = 0;

	int32_t l_periode = 500;					// T = 0.5 second

	if ( g_but_P3_18.read() == 0 )				// check button
	{
		l_periode /= 10;						// increase speed of blinking
	}

	if ( l_ticks < l_periode / 2 )				// time to switch on or off?
	{
		g_led_P3_16.write( 0 );					// LED Off
	}
	else
	{
		g_led_P3_16.write( 1 );					// LED On
	}

	l_ticks++;									// milliseconds counter
	if ( l_ticks >= l_periode )					// end of time period?
	{
			l_ticks = 0;						// start time period again
	}
}

void demo_leds();


//uint8_t tmp[ 480 * 4 + 2 ] = { ST7796S_CMD_RAMWR, 0 };

int main()
{
	PRINTF( "LED demo program started...\n" );

	//demo_leds();

	lcd_init();

	//_lcd_select_area( 0,  0,  100,  100 );
	//memset( tmp + 2, 0xff, sizeof( tmp ) - 2 );
	while ( 0 )
	{
		for ( int x = 0; x < 480; x++ )
			for ( int y = 0; y < 320; y++ )
				lcd_put_pixel( x,  y,  0x001F );

		for ( int x = 0; x < 480; x++ )
			for ( int y = 0; y < 320; y++ )
				lcd_put_pixel( x,  y,  0x07E0 );

		for ( int x = 0; x < 480; x++ )
			for ( int y = 0; y < 320; y++ )
				lcd_put_pixel( x,  y,  0xF800 );
	}
    lcd_init();                             // LCD initialization

    uint16_t l_color_red = 0xF800;
    uint16_t l_color_green = 0x07E0;
    uint16_t l_color_blue = 0x001F;
    uint16_t l_color_white = 0xFFFF;

    // simple animation display four color square using LCD_put_pixel function
    int32_t l_limit = LCD_HEIGHT - 40;

    for ( int32_t ofs = 0; ofs < 20; ofs++ ) // square offset in x and y axis
            for ( int32_t i = 0; i < l_limit; i++ )
            {
                    lcd_put_pixel( ofs + i,       ofs + 0,       l_color_red );
                    lcd_put_pixel( ofs + 0,       ofs + i,       l_color_green );
                    lcd_put_pixel( ofs + i,       ofs + l_limit, l_color_blue );
                    lcd_put_pixel( ofs + l_limit, ofs + i,       l_color_white );
            }

    return 0;


	/*while ( 1 )
	{
		memset( tmp + 2, 0xff, sizeof( tmp ) - 2 );
		for ( int i = 0; i < 320; i++ )
		{
			_lcd_select_area( 0,  i, 480, i + 1 );
			//uint8_t tmp[ 1000 ] = { ST7796S_CMD_RAMWR, 0 };
			_spi_send_data( tmp,  sizeof( tmp ) );
		}
		for ( int i = 2; i < sizeof( tmp ); i += 2 )
			tmp[ i ] = 0;
		for ( int i = 0; i < 320; i++ )
		{
			_lcd_select_area( 0,  i, 480, i + 1 );
			//uint8_t tmp[ 1000 ] = { ST7796S_CMD_RAMWR, 0 };
			_spi_send_data( tmp,  sizeof( tmp ) );
		}
	}*/


#if 0
	// modern approach with timer (and interrupt)
	Ticker l_ticker;

	l_ticker.attach( control_from_ticker, 1 );	// attach callback function

	while ( 1 )
	{ // infinite loop
	}

#else

	// lazy (conservative) approach
	while ( 1 )
	{
		int32_t l_periode = 500;				// T = 500 ms = 0.5 sec

		if ( g_but_P3_18.read() == 0 )			// button pressed?
		{
			l_periode /= 10;					// speed up blinking
		}

		g_led_P3_16.write( 0 );					// LED off

		delay_ms( l_periode / 2 );

		g_led_P3_16.write( 1 );					// LED on

		delay_ms( l_periode / 2 );
	}

#endif
}

